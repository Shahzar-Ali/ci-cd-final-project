apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ci-cd-pipeline
spec:
  workspaces:
  - name: source
  params:
  - name: repo-url
    description: Git repo URL
    default: https://github.com/YOUR_ACCOUNT/ci-cd-final-project.git
  - name: revision
    description: Git revision/branch
    default: main
  - name: app-name
    description: application name for deploy
    default: counter-service
  - name: build-image
    description: image to create
    default: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/counter-service:latest

  tasks:
  - name: cleanup
    taskRef:
      name: cleanup
    workspaces:
    - name: source
      workspace: source

  - name: git-clone
    taskRef:
      name: git-clone
    params:
    - name: url
      value: $(params.repo-url)
    - name: revision
      value: $(params.revision)
    workspaces:
    - name: output
      workspace: source

  - name: flake8-lint
    # If you have a flake8 task installed use taskRef name here; else run flake8 as an inline Task
    taskSpec:
      workspaces:
      - name: source
      steps:
      - name: flake8
        image: python:3.9-slim
        workingDir: $(workspaces.source.path)
        script: |
          #!/bin/bash
          set -e
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8
          flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 service --count --max-complexity=10 --max-line-length=127 --statistics
    workspaces:
    - name: source
      workspace: source

  - name: nose-tests
    taskRef:
      name: nose
    workspaces:
    - name: source
      workspace: source

  - name: build-image
    taskRef:
      name: buildah
    params:
    - name: IMAGE
      value: $(params.build-image)
    - name: CONTEXT
      value: $(workspaces.source.path)
    workspaces:
    - name: source
      workspace: source

  - name: deploy
    taskRef:
      name: openshift-client
    params:
    - name: SCRIPT
      value: |
        oc create deployment $(params.app-name) --image=$(params.build-image) --dry-run=client -o yaml | oc apply -f -
